facet_wrap(~Hugo_Symbol) +
stat_compare_means() +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
df_leuk_plot %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Hugo_Symbol) +
stat_compare_means() +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
df_leuk_plot %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Hugo_Symbol) +
stat_compare_means() +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
#change font size of wilcoxon test in plots
font_size <- 2
df_leuk_plot %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Hugo_Symbol) +
stat_compare_means(size = font_size) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
df_leuk_plot %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Hugo_Symbol) +
stat_compare_means(label.y = 0.8, size = font_size) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
?slice
to_plot =
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
#SINCE ALL GENES SHOW THE SAME P-VALUE, GET RANDOM 30 GENES TO PLOT
slice_min(n = 30, order_by = fdr, with_ties = F)
head(to_plot)
symbols_to_plot =
to_plot %>%
select(Symbol) %>%
as_vector()
df_leuk_plot =
df_leuk %>%
#PLOT ONLY 30 GENES WITH THE SMALLEST P-VALUE
filter(df_leuk$Hugo_Symbol %in% symbols_to_plot)
#change font size of wilcoxon test in plots
font_size <- 2
df_leuk_plot %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Hugo_Symbol) +
stat_compare_means(label.y = 0.8, size = font_size) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
View(to_plot)
to_plot =
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
tail()
View(to_plot)
to_plot =
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
#SINCE ALL GENES SHOW THE SAME P-VALUE, GET RANDOM 30 GENES TO PLOT
slice_min(n = 30, order_by = df_ks_Leukemia$fdr, with_ties = F)
#to_plot =
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
#SINCE ALL GENES SHOW THE SAME P-VALUE, GET RANDOM 30 GENES TO PLOT
slice_min(n = 30, order_by = fdr, with_ties = F)
#to_plot =
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
arrange(fdr)
to_plot =
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
#SINCE ALL GENES SHOW THE SAME P-VALUE, GET RANDOM 30 GENES TO PLOT
slice_sample(n = 30)
head(to_plot)
symbols_to_plot =
to_plot %>%
select(Symbol) %>%
as_vector()
df_leuk_plot =
df_leuk %>%
#PLOT ONLY 30 GENES WITH THE SMALLEST P-VALUE
filter(df_leuk$Hugo_Symbol %in% symbols_to_plot)
#change font size of wilcoxon test in plots
font_size <- 2
df_leuk_plot %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Hugo_Symbol) +
stat_compare_means(label.y = 0.8, size = font_size) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
#SINCE ALL GENES SHOW THE SAME P-VALUE, GET RANDOM 30 GENES TO PLOT
slice_sample(n = 30)
to_plot =
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
#SINCE ALL GENES SHOW THE SAME P-VALUE, GET RANDOM 30 GENES TO PLOT
slice_sample(n = 30)
head(to_plot)
symbols_to_plot =
to_plot %>%
select(Symbol) %>%
as_vector()
df_leuk_plot =
df_leuk %>%
#PLOT ONLY 30 GENES WITH THE SMALLEST P-VALUE
filter(df_leuk$Hugo_Symbol %in% symbols_to_plot)
#change font size of wilcoxon test in plots
font_size <- 2
df_leuk_plot %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Hugo_Symbol) +
stat_compare_means(label.y = 0.8, size = font_size) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
symbols_to_plot =
to_plot %>%
select(Symbol) %>%
as_vector()
df_leuk_plot =
df_leuk %>%
#PLOT ONLY 30 GENES WITH THE SMALLEST P-VALUE
filter(df_leuk$Hugo_Symbol %in% symbols_to_plot)
#change font size of wilcoxon test in plots
font_size <- 2
df_leuk_plot %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Hugo_Symbol) +
stat_compare_means(label.y = 0.8, size = font_size) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
to_plot =
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
#SINCE ALL GENES SHOW THE SAME P-VALUE, GET RANDOM 30 GENES TO PLOT
arrange(fdr) %>%
slice_head(n = 30)
head(to_plot)
dim(to_plot)
head(to_plot)
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
#SINCE ALL GENES SHOW THE SAME P-VALUE, GET RANDOM 30 GENES TO PLOT
slice_sample(n = 30)
to_plot =
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
#SINCE ALL GENES SHOW THE SAME P-VALUE, GET RANDOM 30 GENES TO PLOT
arrange(fdr) %>%
slice_head(n = 30)
head(to_plot)
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>%
#SINCE ALL GENES SHOW THE SAME P-VALUE, GET RANDOM 30 GENES TO PLOT
arrange(fdr) %>% head()
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
filter(fdr < 0.05) %>% head()
df_ks_Leukemia_fdr =
df_ks_Leukemia %>%
mutate(fdr=p.adjust(p, method = "fdr"))
df_ks_Leukemia_fdr %>%
mutate(is_sig = fdr<0.05) %>%
summarise(sig = sum(is_sig)/length(is_sig))
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>%
summarise(sig = sum(is_sig)/length(is_sig))
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>%
head()
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>% View()
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>%
arrange(fdr) %>%
head()
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>%
arrange(fdr) %>%
view()
##LIST OF CANCERS
list_cancer =
df_filt %>%
pull(primary_disease) %>%
unique()
##EMPTY LIST TO STORE LINEAR MODELS
lm_list <- list()
for (dis in list_cancer){
dis_df =
df_filt %>%
filter(primary_disease == dis)
#PREPARE OUTPUT DF
data <- data.frame(Symbol = character(18119), D = numeric(18119), p = numeric(18119), stringsAsFactors = F)
#SEPARATE THE DATAFRAME INTO TWO GROUPS
df_no = dis_df[dis_df$spliceosome_mutated == "NO",]
df_yes = dis_df[dis_df$spliceosome_mutated == "YES",]
#WT SPLICEOSOME
#TRASNFORM TO WIDE FORMAT (SYMBOLS AS COLUMNS)
df_no_wide =
df_no %>%
pivot_wider(id_cols = DepMap_ID, names_from = Hugo_Symbol) %>%
as.data.frame()
#DROP NA VALUES
df_no_wide <- drop_na(df_no_wide)
#SET DEPMAP ID AS ROWNAMES
rownames(df_no_wide) <- df_no_wide$DepMap_ID
df_no_wide <- df_no_wide[,-1]
#MUTATED SPLICEOSOME
#TRASNFORM TO WIDE FORMAT (SYMBOLS AS COLUMNS)
df_yes_wide =
df_yes %>%
pivot_wider(id_cols = DepMap_ID, names_from = Hugo_Symbol) %>%
as.data.frame()
#DROP NA VALUES
df_yes_wide <- drop_na(df_yes_wide)
#SET DEPMAP ID AS ROWNAMES
rownames(df_yes_wide) <- df_yes_wide$DepMap_ID
df_yes_wide <- df_yes_wide[,-1]
#KS TEST
for (j in 1:18119){
k <- ks.test(df_no_wide[,j], df_yes_wide[,j],exact = T)
data$Symbol[j] <- names(df_no_wide)[j]
data$D[j] <- k$statistic
data$p[j] <- k$p.value
}
#CHANGE NAME OF THE DATAFRAME TO THE DISEASE THAT THE LOOP IS CONSIDERING IN EACH ITERATION
assign(paste("df_ks",dis, sep = "_"), data)
}
for (j in 1:18119){
k <- ks.test(df_no_wide[,j], df_yes_wide[,j], exact = T)
df_ks$Symbol[j] <- names(df_no_wide)[j]
df_ks$D[j] <- k$statistic
df_ks$p[j] <- k$p.value
}
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>%
arrange(fdr) %>%
top_n(n = 30) %>%
head()
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>%
arrange(fdr) %>%
view()
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>%
summarise(sig = sum(is_sig)/length(is_sig))
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>%
arrange(fdr) %>%
view()
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>%
arrange(fdr) %>%
top_n(n = 30) %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Hugo_Symbol) +
stat_compare_means(label.y = 0.8, size = font_size) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>%
arrange(fdr) %>%
top_n(n = 30) %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Symbol) +
stat_compare_means(label.y = 0.8, size = font_size) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
to_plot_pan =
df_ks %>%
mutate(fdr=p.adjust(p, method = "fdr")) %>%
mutate(is_sig = fdr<0.05) %>%
arrange(fdr) %>%
top_n(n = 30) %>%
select(Symbol) %>%
as_vector()
to_plot_pan %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Symbol) +
stat_compare_means(label.y = 0.8, size = font_size) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
df_pan_plot =
df_filt %>%
filter(df_filt$Hugo_Symbol %in% to_plot_pan)
df_pan_plot %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Symbol) +
stat_compare_means(label.y = 0.8, size = font_size) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
df_pan_plot %>%
ggplot(aes(y = value, x = spliceosome_mutated, fill = spliceosome_mutated)) +
geom_violin() +
geom_jitter(size = 0.001, position = position_jitter(0.2), alpha = 0.4) +
scale_fill_manual(values = c("NO" = "gray", "YES" = "red")) +
facet_wrap(~Hugo_Symbol) +
stat_compare_means(label.y = 0.8, size = font_size) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
View(dis_df)
library(tidyverse)
library(edgeR)
library(EnsDb.Hsapiens.v86) # human transcript annotation data
library(org.Hs.eg.db)
library(gt)
library(piano)
library(snow)
library(snowfall)
library(hrbrthemes)
library(ggrepel)
library(data.table)
select = dplyr::select
mutate = dplyr::mutate
rename = dplyr::rename
filter = dplyr::filter
#transcript expression
df_trans = read_csv("../../../localdata/depmap/CCLE_RNAseq_transcripts.csv")
#mutations and metadata
CCLE_mutations <- fread("/Users/castilln/Desktop/thesis/localdata/depmap/CCLE_info", header = TRUE)
#LIST OF MUTATIONS FROM CCLE MUTATIONS THAT AFFECT THE SPLICEOSOME
mutations_spliceosome = fread("/Users/castilln/Desktop/thesis/localdata/depmap/mutations_spliceosome.csv")
#list of aggregated p values after linear model (before GSA)
lancaster_pval = readRDS("/Users/castilln/Desktop/thesis/github/results/differential_expression/transcripts/p_values_lancaster.rds")
cell_lines_list =
CCLE_mutations %>%
select(stripped_cell_line_name, primary_disease, DepMap_ID)
cell_lines_list_mutated =
cell_lines_list %>%
mutate(spliceosome_mutated =
case_when(
cell_lines_list$stripped_cell_line_name %in% mutations_spliceosome$stripped_cell_line_name ~ "YES", #if the mutation is in a gene from the spliceosome: 1
!cell_lines_list$stripped_cell_line_name %in% mutations_spliceosome$stripped_cell_line_name ~ "NO")) %>%
distinct()
cell_lines_list_mutated %>%
distinct() %>%
group_by(primary_disease,spliceosome_mutated) %>%
tally()
table(distinct(cell_lines_list_mutated)$primary_disease,distinct(cell_lines_list_mutated)$spliceosome_mutated)
spliceosome_mutated_ID =
cell_lines_list_mutated %>%
select(DepMap_ID, spliceosome_mutated) %>%
distinct()
#RENAME FIRST VARIABLE
transcripts =
df_trans %>%
dplyr::rename("DepMap_ID" = "X1")
#JOIN TRANSCRIPT INFO WITH METADATA
df_trans =
transcripts %>%
pivot_longer(cols=-DepMap_ID, names_to = "Gene", values_to = "log_TPM") %>%
left_join(cell_lines_list_mutated, by = "DepMap_ID")
head(df_trans)
df_trans =
df_trans %>%
separate(col = "Gene", into = c("Hugo_Symbol", "ensembl_id"), sep = "\\s")
myc_target_v1 = fread("../../../localdata/gene_sets/myc/geneset_myc_target_v1.txt", header = F)
myc_target_v2 = fread("../../../localdata/gene_sets/myc/geneset_myc_target_v2.txt", header = F)
myc_target = rbind(myc_target_v1, myc_target_v2)
myc_target =
myc_target %>%
unique() %>%
as_vector()
