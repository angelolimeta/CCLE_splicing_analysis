geom_bar(stat = "identity", fill = "black")+
xlab("Mutation classification") +
ylab("Number of mutations")+
ggtitle("") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
ggplot(data = mutation_class, aes(x = reorder(Variant_Classification, Frequency), y = Frequency, fill="black")) +
geom_bar(stat = "identity", fill = "black")+
xlab("Mutation classification") +
ylab("Number of mutations")+
ggtitle("") +
theme_bw() +
theme(axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
ggplot(data = mutation_class, aes(x = reorder(Variant_Classification, Frequency), y = Frequency, fill="black")) +
geom_bar(stat = "identity", fill = "black")+
xlab("Mutation classification") +
ylab("Number of mutations")+
ggtitle("") +
theme_bw() +
theme(axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
) +
coord_flip()
options(scipen = 1000000)
mutation_class =
CCLE_mutations %>%
count(Variant_Classification) %>%
rename("Frequency" = "n")
ggplot(data = mutation_class, aes(x = reorder(Variant_Classification, Frequency), y = Frequency, fill="black")) +
geom_bar(stat = "identity", fill = "black")+
xlab("Mutation classification") +
ylab("Number of mutations")+
ggtitle("") +
theme_bw() +
theme(axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
) +
coord_flip()
require("knitr")
opts_knit$set(root.dir = "/Users/castilln/Desktop/thesis")
saveRDS(ths8, file="../../results/spliceAI/ths8.rds")
library(tidyverse)
library(readr)
library(data.table)
library(pROC)
library(PRROC)
library(hrbrthemes)
library(viridis)
library(MLeval)
select = dplyr::select
rename = dplyr::rename
require("knitr")
opts_knit$set(root.dir = "/Users/castilln/Desktop/thesis")
##SPLICEAI PARSED OUTPUT
data = fread("localdata/spliceai/output/spliceAI_out.csv")
##CCLE MUTATIONS DATA
CCLE = fread("localdata/depmap/CCLE_info")
##UNIQUE VARIABLE FOR SPLICEAI OUT
udata = data[, id_var := paste(ID, SYMBOL, POS, REF, ALT, sep = "_"), by = .(ID, SYMBOL, POS, REF, ALT)]
##UNIQUE VARIABLE FOR CCLE DATA
uccle = CCLE[, id_var := paste(stripped_cell_line_name, Hugo_Symbol, Start_position, Reference_Allele, Tumor_Seq_Allele1, sep = "_"), by = .(stripped_cell_line_name, Hugo_Symbol, Start_position, Reference_Allele, Tumor_Seq_Allele1)]
###CREATE A NEW COLUMN WITH THE HIGHEST PROBABILITY
##TURN SCORE COLUMNS INTO NUMERIC VARIABLES
#SELECT SCORE COLUMNS
score_col =
udata %>%
select(contains("SCORE"))
#SELECT COLUMN NAMES
cols.num <- colnames(score_col)
#CONVERT INTO NUMERIC
udata = as.data.frame(udata)
udata[cols.num] <- sapply(udata[cols.num],as.numeric)
##SELECT MAX PROBABILITY FROM SPLICEAI OUTPUT
max_data =
udata %>%
mutate(MAX_PROBABILITY = apply(X = data[,10:13], MARGIN = 1, FUN = max)) %>%
drop_na(MAX_PROBABILITY)
## GET LIST OF ALL VARIANT ANNOTATIONS
CCLE %>%
pull(Variant_Classification) %>%
unique()
## GET ANNOTATION COLUMNS
ann_ccle =
uccle %>%
select(Hugo_Symbol, CCLE_Name, Variant_Classification, Variant_annotation, id_var, primary_disease)
## FILTER FOR THOSE CLASSIFIED AS ALTERING A SPLICE SITE
CCLE_splice =
CCLE %>%
filter(Variant_Classification == "Splice_Site")
## JOIN BY HUGO SYMBOL AND CELL LINE NAME
ann_data =
max_data %>%
left_join(ann_ccle, by = "id_var") %>%
select(-c("Hugo_Symbol", "QUAL", "FILTER", "CCLE_Name")) #drop unnecessary variables
## GIVE SPLICE SITE 1 AND EVERYTHING ELSE 0
roc_data =
ann_data %>%
mutate(splice_altering = case_when(
Variant_Classification == "Splice_Site" ~ 1,
Variant_Classification != "Splice_Site" ~ 0
)) %>%
mutate(MAX_PROBABILITY = as.numeric(MAX_PROBABILITY)) %>%
drop_na()
head(roc_data)
rocobj <- roc(response = roc_data$splice_altering, predictor = roc_data$MAX_PROBABILITY, partial.auc.correct = TRUE, percent = TRUE)
## PLOT
plot.roc(rocobj, print.auc = TRUE)
pr <- pr.curve(roc_data$MAX_PROBABILITY,roc_data$splice_altering, curve = T, max.compute = TRUE,
min.compute = TRUE, rand.compute = TRUE)
plot(pr, max.plot = TRUE, min.plot = TRUE, rand.plot = TRUE, fill.area = TRUE)
cont_data =
roc_data %>%
mutate(predictor = case_when(
MAX_PROBABILITY >= 0.8 ~ "Max prob >= 0.8",
MAX_PROBABILITY < 0.8 ~ "Max prob < 0.8"
)) %>%
mutate(pred_splice_altering = case_when(
splice_altering == 1 ~ "Not annotated",
splice_altering == 0 ~ "Annotated splice altering"
))
cont = table(distinct(cont_data)$predictor,distinct(cont_data)$pred_splice_altering)
cont[2:1, 1:2]
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
##BOXPLOTS
roc_data =
roc_data %>%
mutate(splice_altering = as.factor(splice_altering))
ggplot(data = roc_data, aes(x = splice_altering, y = MAX_PROBABILITY)) +
geom_violin(trim = F) +
scale_y_log10() +
theme_bw() +
theme(
axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
) +
scale_x_discrete(labels=c("0" = "NO", "1" = "YES")) +
ylab("Predicted probability of being a splice altering mutation") +
xlab("Splice altering") +
stat_summary(fun.data = data_summary)
## EXCLUDE DATA FROM UNKNOWN OR NOT-CANCEROUS CELL LINES AND FROM ADRENAL CANCER (1 CELL LINE)
data_all_cancers =
select(filter(roc_data, primary_disease != "Unknown" & primary_disease != "Non-Cancerous" & primary_disease != "Adrenal Cancer"), c("primary_disease", "MAX_PROBABILITY", "splice_altering")) %>%
mutate(splice_altering = as.factor(splice_altering))
## MAKE SURE SPLICE_ALTERING IS A FACTOR
ggplot(data = data_all_cancers, aes(x = splice_altering, y = MAX_PROBABILITY, fill = splice_altering)) +
geom_violin(trim = F) +
scale_y_log10() +
facet_wrap(facets = "primary_disease") +
#facet_grid(. ~ primary_disease) +
scale_fill_viridis(discrete=T, name="Annotated as splice-altered variants based on RNA-Seq data", labels = c("NO", "YES")) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
) +
scale_x_discrete(labels=c("0" = "NO", "1" = "YES")) +
ylab("Predicted log probability of being a splice altering mutation") +
xlab("") +
stat_summary(fun.data = data_summary)
ggsave("spliceai_viz_probabilities.png", width = 10, height = 10)
meta =
uccle %>%
select(c("DepMap_ID", "Annotation_Transcript", "id_var"))
ths8 =
ann_data %>%
filter(MAX_PROBABILITY >= 0.8) %>%
select(-c("INFO", "Variant_annotation")) %>%
left_join(meta, by = "id_var") %>%
relocate(DepMap_ID)
head(ths8)
saveRDS(ths8, file="../../results/spliceAI/ths8.rds")
require("knitr")
opts_knit$set(root.dir = "/Users/castilln/Desktop/thesis")
saveRDS(ths8, file="github/results/spliceAI/ths8.rds")
library(tidyverse)
library(data.table)
transcripts <- read_csv("/Users/castilln/Desktop/thesis/localdata/depmap/CCLE_RNAseq_transcripts.csv")
dependency <- fread("/Users/castilln/Desktop/thesis/localdata/depmap/achilles/Achilles_gene_dependency.csv")
CCLE <- fread("/Users/castilln/Desktop/thesis/localdata/depmap/CCLE_info")
CCLE_splice =
CCLE %>%
filter(Variant_Classification == "Splice_Site") %>%
count(Hugo_Symbol) %>%
rename("SPLICE_SITE_MUTATIONS" = "n") %>%
arrange(desc(SPLICE_SITE_MUTATIONS))
head(CCLE_splice)
df_splice =
CCLE %>%
filter(Variant_Classification == "Splice_Site")
df_other =
CCLE %>%
anti_join(df_splice)
long_df_splice =
CCLE %>%
select(DepMap_ID, Hugo_Symbol, primary_disease, Variant_Classification) %>%
rename("SYMBOL" = "Hugo_Symbol")
long_dep =
dependency %>%
pivot_longer(cols= -DepMap_ID, names_to = "SYMBOL", values_to = "DEPENDENCY")
head(long_dep)
long_dep =
long_dep %>%
separate(col = "SYMBOL", into = c("SYMBOL", "ENTREZ"), sep = "\\s")
long_dep$ENTREZ <- gsub("\\(|\\)","",as.character(long_dep$ENTREZ))
ann_lines_dep =
long_dep %>%
left_join(long_df_splice, by = c("DepMap_ID","SYMBOL"))
ann_dep_ccle =
ann_lines_dep %>%
filter(!is.na(primary_disease))
head(ann_dep_ccle)
splice_dep =
ann_dep_ccle %>%
filter(Variant_Classification == "Splice_Site")
other_dep =
ann_dep_ccle %>%
filter(Variant_Classification != "Splice_Site")
ann_dep_ccle =
ann_dep_ccle %>%
mutate(Variants = case_when(
Variant_Classification != "Splice_Site" ~ "other",
Variant_Classification == "Splice_Site" ~ "Splice_Site"
))
View(ann_dep_ccle)
t_res =
ann_dep_ccle %>%
##NEST BY TRANSCRIPT
nest(-SYMBOL) %>%
#LM - DESIGN
mutate(model = map(data, ~t.test(DEPENDENCY ~ Variants, data = .))) %>%
#TIDY THE MODEL
mutate(tidied = map(model, tidy)) %>%
unnest(tidied) %>%
select(-c("data", "model"))
head(df_splice)
head(df_other)
## KEEP ONLY THE GENES THAT HAVE BOTH TYPES OF MUTATIONS
df_both =
df_splice %>%
semi_join(df_other, by ="Hugo_Symbol")
View(df_both)
df_both_other =
df_other %>%
semi_join(df_splice, by = "Hugo_Symbol")
other_dep =
other_dep %>%
mutate(Variants = case_when(
Variant_Classification != "Splice_Site" ~ "other",
Variant_Classification == "Splice_Site" ~ "Splice_Site"
))
other_dep =
other_dep %>%
mutate(Variant_Classification = "other"
)
View(other_dep)
other_dep =
other_dep %>%
select(-Variants)
df_both = rbind(other_dep, splice_dep)
View(df_both)
library(broom)
t_res =
ann_dep_ccle %>%
##NEST BY TRANSCRIPT
nest(-SYMBOL) %>%
#LM - DESIGN
mutate(model = map(data, ~t.test(DEPENDENCY ~ Variant_Classification, data = .))) %>%
#TIDY THE MODEL
mutate(tidied = map(model, tidy)) %>%
unnest(tidied) %>%
select(-c("data", "model"))
t_res =
ann_dep_ccle %>%
##NEST BY TRANSCRIPT
nest(-SYMBOL) %>%
#LM - DESIGN
mutate(model = map(data, ~lm(DEPENDENCY ~ Variant_Classification + primary_disease, data = .))) %>%
#TIDY THE MODEL
mutate(tidied = map(model, tidy)) %>%
unnest(tidied) %>%
select(-c("data", "model"))
lm_res =
df_both %>%
##NEST BY TRANSCRIPT
nest(-SYMBOL) %>%
#LM - DESIGN
mutate(model = map(data, ~lm(DEPENDENCY ~ Variant_Classification + primary_disease, data = .))) %>%
#TIDY THE MODEL
mutate(tidied = map(model, tidy)) %>%
unnest(tidied) %>%
select(-c("data", "model"))
lm_res =
df_both %>%
##NEST BY TRANSCRIPT
nest(-DepMap_ID) %>%
#LM - DESIGN
mutate(model = map(data, ~lm(DEPENDENCY ~ Variant_Classification + primary_disease, data = .))) %>%
#TIDY THE MODEL
mutate(tidied = map(model, tidy)) %>%
unnest(tidied) %>%
select(-c("data", "model"))
t_res =
df_both %>%
##NEST BY TRANSCRIPT
nest(-DepMap_ID) %>%
#LM - DESIGN
mutate(model = map(data, ~t.test(DEPENDENCY ~ Variant_Classification, data = .))) %>%
#TIDY THE MODEL
mutate(tidied = map(model, tidy)) %>%
unnest(tidied) %>%
select(-c("data", "model"))
df_splice =
CCLE %>%
filter(Variant_Classification == "Splice_Site")
head(df_splice)
df_other =
CCLE %>%
anti_join(df_splice)
## KEEP ONLY THE GENES THAT HAVE BOTH TYPES OF MUTATIONS
df_both_splice =
df_splice %>%
semi_join(df_other, by ="Hugo_Symbol")
df_both_other =
df_other %>%
semi_join(df_splice, by = "Hugo_Symbol")
long_df_ccle =
CCLE %>%
select(DepMap_ID, Hugo_Symbol, primary_disease, Variant_Classification) %>%
rename("SYMBOL" = "Hugo_Symbol")
View(long_dep)
ann_lines_dep =
long_dep %>%
left_join(long_df_ccle, by = "DepMap_ID")
View(long_df_ccle)
View(df_splice)
View(long_dep)
long_df_splice =
df_splice %>%
select(DepMap_ID, Hugo_Symbol, primary_disease, Variant_Classification) %>%
rename("SYMBOL" = "Hugo_Symbol")
ann_lines_dep =
long_dep %>%
left_join(long_df_splice, by = "DepMap_ID")
View(ann_lines_dep)
ann_lines_dep %>%
select(-SYMBOL.y) %>%
distinct() %>%
head()
ann_dep_ccle =
ann_lines_dep %>%
select(-SYMBOL.y) %>%
distinct() %>%
ann_dep_ccle =
ann_lines_dep %>%
select(-SYMBOL.y) %>%
distinct()
ann_dep_ccle =
ann_lines_dep %>%
select(-SYMBOL.y) %>%
distinct()
ann_dep_ccle %>%
filter(Variant_Classificatoin != "Splice_Site")
ann_dep_ccle %>%
filter(Variant_Classification != "Splice_Site")
splice_dep =
ann_dep_ccle %>%
filter(Variant_Classification == "Splice_Site")
other_dep =
ann_dep_ccle %>%
filter(Variant_Classification != "Splice_Site")
library(tidyverse)
library(data.table)
require("knitr")
opts_knit$set(root.dir = "/Users/castilln/Desktop/thesis/localdata")
off_target = readRDS("spliceai/Dependencies_offTarget_spliceAI.rds")
require("knitr")
opts_knit$set(root.dir = "/Users/castilln/Desktop/thesis/localdata")
off_target = readRDS("spliceai/Dependencies_offTarget_spliceAI.rds")
getwd()
require("knitr")
opts_knit$set(root.dir = "/Users/castilln/Desktop/thesis/localdata")
library(tidyverse)
library(data.table)
require("knitr")
opts_knit$set(root.dir = "/Users/castilln/Desktop/thesis/localdata")
off_target = readRDS("spliceai/Dependencies_offTarget_spliceAI.rds")
off_target = readRDS("spliceai/Dependencies_offTarget_spliceAI.rds")
off_target = readRDS("../../github/scripts/spliceai/Dependencies_offTarget_spliceAI.rds")
off_target = readRDS("../../github/scripts/spliceai/Dependencies_offTarget_spliceAI.rds")
off_target = readRDS("../../github/scripts/spliceai/Dependencies_offTarget_spliceAI.rds")
getwd()
off_target = readRDS("spliceai/Dependencies_offTarget_spliceAI.rds")
off_target = readRDS("spliceai/Dependencies_offTarget_spliceAI.rds")
require("knitr")
opts_knit$set(root.dir = "/Users/castilln/Desktop/thesis/localdata")
off_target = readRDS("spliceai/Dependencies_offTarget_spliceAI.rds")
drug_rep = read_csv("depmap/repurposing_drugs_20200324.txt")
View(drug_rep)
drug_rep = read_tsv("depmap/repurposing_drugs_20200324.txt")
View(drug_rep)
drug_onc =
drug_rep %>%
filter(disease_area == "oncology")
View(drug_onc)
drug_onc =
drug_rep %>%
filter(disease_area == "oncology") %>%
drop_na()
View(drug_onc)
View(off_target)
View(off_target)
install.packages("splitstackshape")
library(splitstackshape)
cSplit(as.data.table(drug_onc), "target", "|")
pars_drug_onc = cSplit(as.data.table(drug_onc), "target", "|")
head(pars_drug_onc)
View(pars_drug_onc)
View(pars_drug_onc)
##AND CCLE MUTATIONS INFO
ccle = read_csv("depmap/CCLE_info")
off_target_ann =
off_target %>%
left_join(ccle$primary_disease, by = "DepMap_ID")
ccle_small =
ccle %>%
select(c("DepMap_ID", "primary_disease"))
off_target_ann =
off_target %>%
left_join(ccle_small by = "DepMap_ID")
off_target_ann =
off_target %>%
left_join(ccle_small, by = "DepMap_ID")
head(off_target_ann)
ccle_small =
ccle %>%
select(c("DepMap_ID", "primary_disease")) %>%
unique()
off_target_ann =
off_target %>%
left_join(ccle_small, by = "DepMap_ID")
head(off_target_ann)
pars_drug_onc =
pars_drug_onc %>%
select(-c("clinical_phase", "disease_area"))
head(pars_drug_onc)
#PIVOT LONGER
pars_drug_onc %>%
pivot_longer(cols = -c("per_iname", "moa", "indication"), names_to = "t", values_to = "TARGET")
head(pars_drug_onc)
#PIVOT LONGER
pars_drug_onc %>%
pivot_longer(cols = -c("pertiname", "moa", "indication"), names_to = "t", values_to = "TARGET")
#PIVOT LONGER
pars_drug_onc %>%
pivot_longer(cols = -c("pert_iname", "moa", "indication"), names_to = "t", values_to = "TARGET")
#PIVOT LONGER
pars_drug_onc %>%
pivot_longer(cols = -c("pert_iname", "moa", "indication"), names_to = "t", values_to = "TARGET") %>%
select(-t) %>%
drop_na()
#PIVOT LONGER
target_list =
pars_drug_onc %>%
pivot_longer(cols = -c("pert_iname", "moa", "indication"), names_to = "t", values_to = "TARGET") %>%
select(-t) %>%
drop_na()
head(target_list)
#PIVOT LONGER
target_list =
pars_drug_onc %>%
pivot_longer(cols = -c("pert_iname", "moa", "indication"), names_to = "t", values_to = "SYMBOL") %>%
select(-t) %>%
drop_na()
head(target_list)
res =
off_target %>%
semi_join(target_list, by = "SYMBOL")
View(res)
