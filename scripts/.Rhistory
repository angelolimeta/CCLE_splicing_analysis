distinct()
CCLE_mutations %>%
select(stripped_cell_line_name, primary_disease, DepMap_ID) -> cell_lines_list
cell_lines_list %>%
mutate(spliceosome_mutated =
case_when(
cell_lines_list$stripped_cell_line_name %in% full_spliceosome_mutations$stripped_cell_line_name ~ "YES", #if the mutation is in a gene from the spliceosome: 1
!cell_lines_list$stripped_cell_line_name %in% full_spliceosome_mutations$stripped_cell_line_name ~ "NO")) -> cell_lines_list_mutated
table(distinct(cell_lines_list_mutated)$primary_disease,distinct(cell_lines_list_mutated)$spliceosome_mutated) -> summary_spliceosome_mutated_cell_lines
cell_lines_list_mutated %>%
select(DepMap_ID, spliceosome_mutated, primary_disease) %>%
distinct() -> spliceosome_mutated_ID
colnames(CCLE_expression)[1] <- "DepMap_ID"
left_join(CCLE_expression, spliceosome_mutated_ID, by = "DepMap_ID") -> expression_plus_spliceosome #join spliceosome and disease data
View(CCLE_expression)
?pivot_longer
CCLE_expression %>%
pivot_longer(cols=!DepMap_ID) %>% head()
CCLE_expression %>%
pivot_longer(cols=!DepMap_ID, names_to = "Gene") %>% head()
long_CCLE_expression <- CCLE_expression %>%
pivot_longer(cols=!DepMap_ID, names_to = "Gene")
ggdensity(long_CCLE_expression$value,
main = "Density plot of gene expression",
xlab = "Expression")
ggdensity(long_CCLE_expression$value,
main = "Density plot of gene expression",
xlab = "Gene")
saphiro.test(long_CCLE_expression$value)
library(ggpubr)
saphiro.test(long_CCLE_expression$value)
shapiro.test(long_CCLE_expression$value)
View(long_CCLE_expression)
ggplot(long_CCLE_expression, aes(x=Gene, y=value)) +
geom_histogram()
long_CCLE_expression <- CCLE_expression %>%
pivot_longer(cols=!DepMap_ID, names_to = "Gene") %>%
mutate(value=log2(value))
ggplot(long_CCLE_expression, aes(x=value)) +
geom_histogram()
View(long_CCLE_expression)
long_CCLE_expression <- CCLE_expression %>%
pivot_longer(cols=!DepMap_ID, names_to = "Gene") %>%
mutate(log_value=log2(value))
ggplot(long_CCLE_expression, aes(x=value)) +
geom_histogram()
ggplot(long_CCLE_expression, aes(x=value)) +
geom_histogram(binwidth = 10)
ggplot(long_CCLE_expression, aes(x=value)) +
geom_histogram(binwidth = 50)
ggplot(long_CCLE_expression, aes(x=value)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5,binwidth = 30) +
geom_density(alpha=0.6)
ggplot(long_CCLE_expression, aes(x=value)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5) +
geom_density(alpha=0.6)
ggplot(long_CCLE_expression, aes(x=value)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5, binwidth = 1) +
geom_density(alpha=0.6)
View(CCLE_expression)
sample_info <- read_csv("/Users/castilln/Desktop/thesis/localdata/depmap/sample_info.csv") #metadata
View(sample_info)
CCLE_expression_info <- left_join(CCLE_expression, sample_info, by = "DepMap_ID")
View(CCLE_expression_info)
#join expression data with metadata
long_CCLE_expression <- CCLE_expression %>%
pivot_longer(cols=-DepMap_ID, names_to = "Gene", values_to = "TPM") %>%
left_join(sample_info, by = "DepMap_ID")
#join expression data with metadata
long_CCLE_expression <- CCLE_expression %>%
pivot_longer(cols=-DepMap_ID, names_to = "Gene", values_to = "TPM") %>%
left_join(sample_info, by = "DepMap_ID")
head(long_CCLE_expression)
ggplot(long_CCLE_expression, aes(x=value)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5, binwidth = 1) +
geom_density(alpha=0.6)
ggplot(long_CCLE_expression, aes(x=TPM)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5, binwidth = 1) +
geom_density(alpha=0.6)
cell_lines_list_mutated %>%
select(DepMap_ID, spliceosome_mutated) %>%
distinct() -> spliceosome_mutated_ID
#join expression data with metadata
long_CCLE_expression <- CCLE_expression %>%
pivot_longer(cols=-DepMap_ID, names_to = "Gene", values_to = "TPM") %>%
left_join(sample_info, by = "DepMap_ID") %>%
left_join(spkiceosome_mutated_ID, by = "DepMap_ID") #add information about spliceosome mutations
#join expression data with metadata
long_CCLE_expression <- CCLE_expression %>%
pivot_longer(cols=-DepMap_ID, names_to = "Gene", values_to = "TPM") %>%
left_join(sample_info, by = "DepMap_ID") %>%
left_join(spliceosome_mutated_ID, by = "DepMap_ID") #add information about spliceosome mutations
head(long_CCLE_expression)
df_counts = long_CCLE_expression %>%
select(DepMap_ID, Gene, TPM) %>%
pivot_wider(names_from = Gene, values_from = TPM) %>%
as.data.frame()
df_counts = long_CCLE_expression %>%
select(DepMap_ID, Gene, TPM) %>%
pivot_wider(names_from = Gene, values_from = TPM) %>%
as.data.frame()
rownames(df_counts) = df_counts[,1]
df_counts = df_counts[,-1]
head(df_counts)
df_counts = df_counts[ssample_info$DepMap_ID]
sample_info <- read_csv("/Users/castilln/Desktop/thesis/localdata/depmap/sample_info.csv") #metadata
df_counts = df_counts[sample_info$DepMap_ID]
df_counts = long_CCLE_expression %>%
select(DepMap_ID, Gene, TPM) %>%
pivot_wider(names_from = DepMap_ID, values_from = TPM) %>%
as.data.frame()
rownames(df_counts) = df_counts[,1]
df_counts = df_counts[,-1]
head(df_counts)
df_counts = df_counts[sample_info$DepMap_ID]
DepMap_ID
df_counts = df_counts[sample_info$DepMap_ID]
meta =
sample_info %>%
mutate(group_disease = as.factor(primary_disease)) %>%
select(-primary_disease)
spliceosome_sample_info =
sample_info %>%
left_join(spliceosome_mutated_ID, by = "DepMap_ID")
select(-c(primary_disease, spliceosome_mutated)
meta =
meta = spliceosome_sample_info %>%
meta = spliceosome_sample_info %>%
mutate(group_disease = as.factor(primary_disease)) %>%
mutate(group_spliceosome = as.factor(spliceosome_mutated)) %>%
select(-c(primary_disease, spliceosome_mutated))
meta =
spliceosome_sample_info %>%
mutate(group_disease = as.factor(primary_disease)) %>%
mutate(group_spliceosome = as.factor(spliceosome_mutated)) %>%
select(-c(primary_disease, spliceosome_mutated))
head(meta)
gene_annot = AnnotationDbi::mapIds(org.Hs.eg.db, keys = rownames(df_counts),
columns = c("SYMBOL"), keytype = "SYMBOL") %>%
as.data.frame()
library("org.Hs.eg.db")
BiocManager::install("org.Hs.eg.db")
library("org.Hs.eg.db")
gene_annot = AnnotationDbi::mapIds(org.Hs.eg.db, keys = rownames(df_counts),
columns = c("SYMBOL"), keytype = "SYMBOL") %>%
as.data.frame()
gene_annot = AnnotationDbi::mapIds(org.Hs.eg.db, keys = rownames(df_counts),
column = c("SYMBOL"), keytype = "SYMBOL") %>%
as.data.frame()
gene_annot = AnnotationDbi::mapIds(org.Hs.eg.db, keys = rownames(df_counts),
) %>%
as.data.frame()
gene_annot = AnnotationDbi::mapIds(org.Hs.eg.db, keys = rownames(df_counts),
) %>%
as.data.frame()
?mapIds
install.packages("ggdist")
library(ggdist)
keys()
rownames(df_counts) = df_counts[,1] %>%
gsub('[A-z0-9]*', '')
rownames(df_counts) = df_counts[,1] %>%
gsub(' [0-9]*', '')
rownames(df_counts) = df_counts[,1] %>%
gsub(' [0-9]*', '')
rownames(df_counts) = df_counts[,1] %>%
gsub(' [0-9]+', '')
rownames(df_counts) = df_counts[,1] %>%
test <- rownames(df_counts)
test <- rownames(df_counts)
head(test)
test %>% gsub(' [0-9]+', '')
test %>% gsub('([0-9]+) .*', '\\1')
test %>% gsub('([0-9]+) .*', '\\1') %>% head()
gsub("\\s*\\([^\\)]+\\)","",as.character(rownames(df_counts)))
rownames(df_counts) %>% gsub("\\s*\\([^\\)]+\\)","",as.character(rownames(df_counts)))
head(df_counts)
rownames(df_counts) <- gsub("\\s*\\([^\\)]+\\)","",as.character(rownames(df_counts)))
df_counts = df_counts[,-1]
head(df_counts)
gene_annot = AnnotationDbi::mapIds(org.Hs.eg.db, keys = rownames(df_counts),
column = c("GENENAME"), keytype = ("SYMBOL")) %>%
as.data.frame()
head(gene_annot)
colnames(gene_annot) = c("SYMBOL", "DESCRIPTION")
colnames(gene_annot) = c("DESCRIPTION")
head(gene_annot)
install.packages("edgeR")
BiocManager::install("edgeR")
library(edgeR)
dge = DGEList(counts = df_counts,
samples = meta,
genes = gene_annot)
View(meta)
?left_join
View(long_CCLE_expression)
spliceosome_sample_info =
sample_info %>%
left_join(spliceosome_mutated_ID, by = "DepMap_ID") %>%
filter(DepMap_ID %in% long_CCLE_expression$DepMap_ID)
meta =
spliceosome_sample_info %>%
mutate(group_disease = as.factor(primary_disease)) %>%
mutate(group_spliceosome = as.factor(spliceosome_mutated)) %>%
select(-c(primary_disease, spliceosome_mutated))
dge = DGEList(counts = df_counts,
samples = meta,
genes = gene_annot)
summary(dge)
keep  = filterByExpr(dge)
dge = dge[keep, , keep.lib.sizes = FALSE]
dge <- calcNormFactors(dge)
dge$samples
dge = DGEList(counts = df_counts,
samples = meta,
genes = gene_annot,
group = c(meta$group_disease, meta$group_spliceosome))
dge = DGEList(counts = df_counts,
samples = meta,
genes = gene_annot,
group = meta$group_spliceosome)
summary(dge)
keep  = filterByExpr(dge)
dge <- calcNormFactors(dge)
dge <- calcNormFactors(dge)
dge$samples
plotMDS(dge)
design = model.matrix(~0+group, data = dge$samples)
colnames(design)  <- levels(dge$samples$group)
design
dge = estimateDisp(dge, design)
fit <- glmQLFit(dge, design)
plotQKDips(fit)
plotQLDisp(fit)
my.contrasts <- makeContrasts(splice_mutated = YES - NO,
levels = design)
#null = no changes between cell lines with and without mutated spliceoosme
qlf.NullvsMut <- glmQLFTest(fit, contrast = my.contrasts[, "NullvsMut"])
topTags(qlf.NullvsMut)
qlf.NullvsMut <- glmQLFTest(fit, contrast = my.contrasts[, "NullvsMut"])
qlf.NullvsMut <- glmQLFTest(fit, contrast = my.contrasts[,"NullvsMut"])
qlf.NullvsMut <- glmQLFTest(fit, contrast=my.contrasts[,"NullvsMut"])
et <- exactTest(dge)
topTags(dge)
et <- exactTest(dge)
et <- exactTest(dge)
topTags(dge
topTags(et)
topTags(et)
view(et)
summary(decideTests(et))
require("knitr")
opts_knit$set(root.dir = "/Users/castilln/Desktop/thesis")
library(tidyverse)
library(readr)
library(biomaRt)
library(cowplot)
library(ggpubr)
library(data.table)
library(ggsci)
library(ggrepel)
library(ggExtra)
library(hrbrthemes)
library(wesanderson)
library(EDASeq)
library(dplyr)
library(goseq)
select = dplyr::select
count = dplyr::count
rename = dplyr::rename
CCLE_mutations <- read_delim("localdata/depmap/CCLE.csv", ",", escape_double = FALSE, trim_ws = TRUE)
#head(CCLE_mutations)
sample_info <- read_csv("localdata/depmap/sample_info.csv")
#head(sample_info)
mutations_info = left_join(CCLE_mutations, sample_info, by = c("DepMap_ID"))
#write.csv(mutations_info,"/Users/castilln/Desktop/thesis/localdata/depmap/mutations_info", row.names = FALSE)
mutations_per_cancer =
mutations_info %>%
count("primary_disease")
plot_CCLE =
mutations_info %>%
select(primary_disease, primary_or_metastasis) %>%
left_join(mutations_per_cancer, by = "primary_disease")
View(mutations_info)
mutations_per_cancer =
mutations_info %>%
count("primary_disease")
View(mutations_per_cancer)
mutations_per_cancer =
mutations_info %>%
count(primary_disease)
View(mutations_info)
View(mutations_per_cancer)
plot_CCLE =
mutations_info %>%
select(primary_disease, primary_or_metastasis) %>%
left_join(mutations_per_cancer, by = "primary_disease")
ggplot(data=plot_CCLE) +
geom_col(mapping = aes(x = reorder(primary_disease, freq),y = freq, fill = primary_or_metastasis)) +
xlab(NULL) +
ylab(NULL) +
labs(fill = "Primary or Metastasis") +
ggtitle("Number of primary and metastatic cancer in each cell line") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
) +
scale_fill_manual(values = wes_palette("GrandBudapest1", n = 2, type = "discrete"),na.value ="black") +
coord_flip()
mutations_per_cancer =
mutations_info %>%
count(primary_disease) %>%
rename("freq" = "n")
plot_CCLE =
mutations_info %>%
select(primary_disease, primary_or_metastasis) %>%
left_join(mutations_per_cancer, by = "primary_disease")
ggplot(data=plot_CCLE) +
geom_col(mapping = aes(x = reorder(primary_disease, freq),y = freq, fill = primary_or_metastasis)) +
xlab(NULL) +
ylab(NULL) +
labs(fill = "Primary or Metastasis") +
ggtitle("Number of primary and metastatic cancer in each cell line") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
) +
scale_fill_manual(values = wes_palette("GrandBudapest1", n = 2, type = "discrete"),na.value ="black") +
coord_flip()
##MUTATIONS PER CELL LINE
cell_lines_studied =
mutations_info %>%
group_by(primary_disease) %>%
count(CCLE_Name) %>%
dplyr::rename("observed_mutations_percelline" = "n")
## STUDIED CELL LINES PER CANCER
normalize =
cell_lines_studied %>%
count(primary_disease) %>%
rename("cell_lines_number" = "n")
## MUTATIONS ACROSS ALL CELL LINES
cell_lines_distribution =
cell_lines_studied %>%
count(primary_disease, wt = observed_mutations_percelline) %>%
rename("observed_mutation_all_cell_lines" = "n")
ggplot(data = normalize, aes(x = reorder(primary_disease, cell_lines_number), y = cell_lines_number, fill="black")) +
geom_bar(stat = "identity", fill = "black")+
xlab(NULL) +
ylab("Number of cell lines studied")+
ggtitle("Number of cell lines studied per cancer") +
geom_text(aes(label = cell_lines_number), size = 3, position = "dodge", hjust=-0.2) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
) +
coord_flip()
cell_lines_distribution =
right_join(cell_lines_distribution, normalize, by = "primary_disease", copy = TRUE)
cell_lines_distribution =
cell_lines_distribution %>%
mutate(normalized_mutations = observed_mutation_all_cell_lines / cell_lines_number) %>%
arrange(normalized_mutations)
ggplot(data = cell_lines_distribution, aes(x = reorder(primary_disease, normalized_mutations), y = normalized_mutations)) +
geom_col(fill = "black") +
geom_text(aes(label = sprintf("%0.0f", round(normalized_mutations, digits =0))), size = 2.5, position = "dodge", hjust=-0.05) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
) +
coord_flip() +
xlab(NULL) +
ylab("Observed mutations normalized for cell lines studied")
#ensembl <- useMart("ensembl")
#datasets <- listDatasets(ensembl)
#view(datasets)
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
View(CCLE_mutations)
#get list of all available filters
#filters <- listFilters(ensembl)
#create vector with the Hugo Symbols that we want
id_list = mutations_info %>%
select(Hugo_Symbol) %>%
distinct() %>%
pull(Hugo_Symbol)
#gene list with hugo symbol and entrez id / ensembl id
genes_list =
getBM(filters= "hgnc_symbol", attributes= c("ensembl_gene_id","hgnc_symbol", "description"),
values = id_list, uniqueRows = TRUE, mart = useDataset("hsapiens_gene_ensembl", useMart("ensembl")))
ensembl_list =
genes_list %>%
pull(ensembl_gene_id)
#GET GENE AND TRANSCRIPT LENGTH
getlength(ensembl_list, 'hg19', 'ensGene') #output into hg19.ensGene.LENGTH
#rename length output
length = hg19.ensGene.LENGTH
#write.csv(length, "./localdata/gene_length.csv") #save as csv to local
length =
length %>%
rename("ensembl_gene_id" = "Gene") #obs length depends on transcript id, no gene id
#merge length and gc content with hugo symbol & gene info
gene_length_list =
left_join(genes_list, length, by = "ensembl_gene_id", copy = TRUE) %>%
select(hgnc_symbol, Length, Transcript) %>%
rename("Hugo_Symbol" = "hgnc_symbol")
write_csv(gene_length_list, "../../../localdata/gene_length.csv", quote = FALSE)
mutation_class =
CCLE_mutations %>%
group_by(Variant_Classification) %>%
tally(Variant_Classification)
mutation_class =
CCLE_mutations %>%
count(Variant_Classification)
View(mutation_class)
mutation_class =
CCLE_mutations %>%
count(Variant_Classification) %>%
rename("Frequency" = "n")
ggplot(data = mutation_class, aes(x = reorder(Variant_Classification, Frequency), y = Frequency, fill="black")) +
geom_bar(stat = "identity", fill = "black")+
xlab("Mutation classification") +
ylab("Number of mutations")+
ggtitle("") +
geom_text(aes(label = cell_lines_number), size = 3, position = "dodge", hjust=-0.2) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
ggplot(data = mutation_class, aes(x = reorder(Variant_Classification, Frequency), y = Frequency, fill="black")) +
geom_bar(stat = "identity", fill = "black")+
xlab("Mutation classification") +
ylab("Number of mutations")+
ggtitle("") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
ggplot(data = mutation_class, aes(x = reorder(Variant_Classification, Frequency), y = Frequency, fill="black")) +
geom_bar(stat = "identity", fill = "black")+
xlab("Mutation classification") +
ylab("Number of mutations")+
ggtitle("") +
theme_bw() +
theme(axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
)
ggplot(data = mutation_class, aes(x = reorder(Variant_Classification, Frequency), y = Frequency, fill="black")) +
geom_bar(stat = "identity", fill = "black")+
xlab("Mutation classification") +
ylab("Number of mutations")+
ggtitle("") +
theme_bw() +
theme(axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
) +
coord_flip()
options(scipen = 1000000)
mutation_class =
CCLE_mutations %>%
count(Variant_Classification) %>%
rename("Frequency" = "n")
ggplot(data = mutation_class, aes(x = reorder(Variant_Classification, Frequency), y = Frequency, fill="black")) +
geom_bar(stat = "identity", fill = "black")+
xlab("Mutation classification") +
ylab("Number of mutations")+
ggtitle("") +
theme_bw() +
theme(axis.ticks.x = element_blank(),
legend.position = "bottom",
plot.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
) +
coord_flip()
