test %>%
gsub("c\\(", "", test$INFO) %>% head()
View(test)
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "c(", "")
?str_replace
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "c(", " ")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "c[(]", " ")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "c\\(", " ")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "c\\(", "")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "(c\\()", "")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "(c[\\(])", "")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "\\(", "")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "\"", "")
View(test)
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "[(]", "")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "[(]", "")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "[^c(]", "")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "[^c(*]", "")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_replace(test$INFO, "^c(*", "")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_remove(test$INFO, "^c(")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_remove(test$INFO, "(")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_remove(test$INFO, "c\\(.*")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_remove(test$INFO, "c[\\(].*")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_remove(test$INFO, "c\\(|\\.*")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_remove(test$INFO, "c\\(|\\")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
str_remove(test$INFO, "c[][()]")
#dont use gsub, can only take a vector at a time. vectorized approach:
str_remove(test$INFO, "c[][()]")
#dont use gsub, can only take a vector at a time. vectorized approach:
str_remove(test$INFO, "[][()]")
#dont use gsub, can only take a vector at a time. vectorized approach:
str_remove(test$INFO, "[()]")
#dont use gsub, can only take a vector at a time. vectorized approach:
str_remove(test$INFO, "[()]") -> test
#dont use gsub, can only take a vector at a time. vectorized approach:
str_remove(test$INFO, "[()]")
ordered_full %>%
mutate(split = map(INFO, ~ str_split(.x, "[|,]")[[1]])) %>%
separate(split, c("INFO", "symbol", "score acc gain", "score acc loss", "score donor gain", "score donor loss", "pos acc gain", "pos acc loss", "pos donor gain", "pos donor loss"), ",", extra="merge") %>%
head() -> test
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[()]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c()]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c\\(]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c(]"))
mutate(INFO = str_remove(INFO, "[c(\\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c\(]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c(]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c(]")) %>%
mutate(INFO = str_remove(INFO, "[()]"))
mutate(INFO = as.factor(INFO))
mutate(INFO = as.factor(test$INFO))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(INFO = as.factor(INFO))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(INFO = str_remove(INFO, "[\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(INFO = str_remove(INFO, "[\".*\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(INFO = str_remove(INFO, "[\".*\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(INFO = str_remove(INFO, "[\".*\" ]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(INFO = str_remove(INFO, "\".*\""))
]
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(INFO = str_remove(INFO, "[\".*\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\".*\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\"[.*]\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\"[.*]\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\"[A-Z0-0]\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\"[A-Z0-9]\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\"[A-Z0-9]\"$]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\".*\"$]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\".*\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\".[*]\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\"[]\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\"\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove_all(symbol, "[\"\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove_all(test, "[\"\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove_all(., "[\"\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
str_remove_all(symbol, "[\"\"]")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
str_remove_all(symbol, "[\"]")
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove(symbol, "[\"\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
mutate(symbol = str_remove_all(symbol, "[\"\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
str_remove_all(-, "[\"\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
str_remove_all(., "[\"\"]"))
#dont use gsub, can only take a vector at a time. vectorized approach:
test %>%
mutate(INFO = str_remove(INFO, "[c]")) %>%
mutate(INFO = str_remove(INFO, "[()]")) %>%
str_remove_all(test, "[\"\"]"))
str_remove_all(test, "[\"\"]"))
str_remove_all(test, "[\"\"]")
str_remove_all(test, "[\"]")
str_remove_all(test, "[()\"]")
str_remove_all(test, "[()\"]") -> test1
str_remove_all(test, "[()\"]")
str_remove_all(test, "[()\"]") %>% head()
?str_remove_all
test %>%
str_remove_all(INFO, "[()\"]")
test %>%
str_remove_all("[()\"]")
test %>%
str_remove_all("[c()\"]")
test %>%
str_remove_all("[c()\"]") -> test
ordered_full %>%
mutate(split = map(INFO, ~ str_split(.x, "[|,]")[[1]])) %>%
separate(split, c("INFO", "symbol", "score acc gain", "score acc loss", "score donor gain", "score donor loss", "pos acc gain", "pos acc loss", "pos donor gain", "pos donor loss"), ",", extra="merge") %>%
head() -> test
test %>%
mutate_all(funs(str_remove_all("[c()\"]")))
test %>%
mutate_all(funs(str_remove_all(.,"[c()\"]")))
ordered_full %>%
mutate(split = map(INFO, ~ str_split(.x, "[|,]")[[1]])) %>%
separate(split, c("INFO", "symbol", "score acc gain", "score acc loss", "score donor gain", "score donor loss", "pos acc gain", "pos acc loss", "pos donor gain", "pos donor loss"), ",", extra="merge") -> split_df
#dont use gsub, can only take a vector at a time. vectorized approach:
split_df_ns =
split_df %>%
mutate_all(funs(str_remove_all(.,"[c()\"]")))
View(split_df_ns)
View(split_df_ns)
head(split_df_ns)
install.packages("sjmisc")
library(sjmisc)
test =
split_df_ns[98:105,]
View(test)
for (row in 1:nrow(test)) {
if str_contains(test[i]$`pos donor loss`, ","){
for row in (1:nrow(test)) {
for (row in 1:nrow(test)) {
if str_contains(test[i]$`pos donor loss`, ","){
for (row in 1:nrow(test)) {
if (str_contains(test[i]$`pos donor loss`, ",")){
rbind(test, test[rep(i, 1), ])
}
}
View(test)
View(test)
rbind(test, test[rep([i], 1), ])
for (row in 1:nrow(test)) {
if (str_contains(test[i]$`pos donor loss`, ",")){
rbind(test, test[rep([i], 1), ])
rbind(test, test[rep(i, 1)])
for (row in 1:nrow(test)) {
if (str_contains(test[i]$`pos donor loss`, ",")){
rbind(test, test[rep(i, 1)])
}
}
?str_contains
if (str_contains(test[i]$`pos donor loss`, "*,*")){
rbind(test, test[rep(i, 1)])
}
for (row in 1:nrow(test)) {
if (str_contains(test[i]$`pos donor loss`, "*,*")){
rbind(test, test[rep(i, 1)])
}
}
for (row in 1:nrow(test)) {
if (str_contains(test[i]$`pos donor loss`, ",")){
rbind(test, test[rep(i, 1)])
}
}
View(test)
View(test)
test =
split_df_ns[98:105,]
for (row in 1:nrow(test)) {
if (str_contains(test[i]$`pos donor loss`, ",")){
rbind(test, test[rep(i, 1)])
}
}
for (row in 1:nrow(test)) {
if (str_contains(test[i]$`pos donor loss`, "[0-9]")){
rbind(test, test[rep(i, 1)])
}
}
if (str_detect(test[i]$`pos donor loss`, "[0-9]") == TRUE){
rbind(test, test[rep(i, 1)])
}
for (row in 1:nrow(test)) {
if (str_detect(test[i]$`pos donor loss`, "[0-9]") == TRUE){
rbind(test, test[rep(i, 1)])
}
}
if (str_detect(test[i]$`pos donor loss`, "[0-9]") == TRUE){
rbind(test, test[rep(i, 1)])
}
print(i)
for (row in 1:nrow(test)) {
print(i)
if (str_detect(test[i]$`pos donor loss`, "[0-9]") == TRUE){
rbind(test, test[rep(i, 1)])
}
}
nrow(test)
for (row in 1:nrow(test)) {
print(row)
if (str_detect(test[row]$`pos donor loss`, "[0-9]") == TRUE){
rbind(test, test[rep(row, 1)])
}
}
View(test)
if (str_detect(test[row]$`pos donor loss`, "[0-9]") == TRUE){
rbind(test, test[rep(row, 1)])
}
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
rbind(test, test[rep(row, 1)])
}
?rep
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
rbind(test, test[rep(row, 1, 7)])
}
rbind(test, test[rep(row, 1, length.out = 7)])
rbind(test, test[rep(row, 1, len = 7)])
test =
split_df_ns[98:105,]
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
rbind(test, test[rep(row, 1, len = 7)])
}
rbind(test, test[rep(row, 1, len = 2)])
rbind(test, test[rep(row, times = 1, len = 2)])
rbind(test, test[rep(row, times = 1, len = 3)])
rbind(test, test[rep(row[,1:7], times = 1)])
rbind(test, test[rep(row[1:7], times = 1)])
rbind(test, test[rep(row[1,1:7], times = 1)])
rbind(test, test[rep(row[1:7], times = 1)])
rbind(test, test[rep(row, times = 1)])
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
rbind(test, test[rep(row, times = 1)])
}
}
View(test)
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
}
}
View(test)
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
test = test[order(test[,2]),]
}
}
test =
split_df_ns[98:105,]
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
test = test[order(test[,2]),]
}
}
View(test)
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
}
}
test = test[order(test[,2]),]
View(test)
test =
split_df_ns[98:105,]
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
}
}
test = test[order(test[,2]),]
View(test)
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
test[i] = gsub(",.*", "", test[i])
}
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
test[i] = gsub(",.*", "", test[i])
}
}
test =
split_df_ns[98:105,]
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
test[i] = gsub(",.*", "", test[i])
}
}
test =
split_df_ns[98:105,]
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
test[row] = gsub(",.*", "", test[row])
}
}
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
test[row] = gsub(",.*", "", test[row]$`pos donor loss`)
}
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
test[row] = gsub(",.*", "", test[row]$`pos donor loss`)
}
}
test = test[order(test[,2]),]
View(test)
test =
split_df_ns[98:105,]
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
gsub(",.*", "", test[row]$`pos donor loss`)
}
}
test = test[order(test[,2]),]
gsub(",.*", "", test[row]$`pos donor loss`) = test[row]$`pos donor loss`
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
gsub(",.*", "", test[row]$`pos donor loss`) = test[row]$`pos donor loss`
}
}
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
gsub(",.*", "", test[row]$`pos donor loss`) <- test[row]$`pos donor loss`
}
}
gsub("(.),.*", "", test[row]$`pos donor loss`)
gsub(",.*", "", test[row]$`pos donor loss`)
test[row]$`pos donor loss` <- gsub(",.*", "", test[row]$`pos donor loss`)
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
test[row]$`pos donor loss` <- gsub(",.*", "", test[row]$`pos donor loss`)
}
}
test = test[order(test[,2]),]
View(test)
test =
split_df_ns[98:105,]
for (row in 1:nrow(test)) {
if (str_detect(test[row]$`pos donor loss`, ",") == TRUE){
test = rbind(test, test[rep(row, times = 1)])
test[row]$`pos donor loss` <- gsub(",.*", "", test[row]$`pos donor loss`)
}
}
test = test[order(test[,2]),]
View(test)
